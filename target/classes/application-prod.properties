spring.application.name=Vacation Planning Application
# Production Profile for Main App
spring.config.activate.on-profile=prod


#MVC
spring.mvc.hiddenmethod.filter.enabled=true
# ===============
# JPA / Hibernate
# ===============
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
logging.level.org.hibernate.persister.entity=ERROR
urlaubsplanung-notification.failure-message.clear-history=Notification server is temporary down
# ============
# Feign client
# ============
feign.client.config.default.connectTimeout=5000
feign.client.config.default.readTimeout=5000

# ===================================================================
# Kafka Producer Configuration (Production)
# ===================================================================
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.properties.max-in-flight-requests-per-connection=5
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.spring.json.add.type.headers=false

# ===================================================================
# Kafka Consumer Configuration (Production)
# ===================================================================
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.value.default.type=com.fasterxml.jackson.databind.JsonNode
spring.kafka.consumer.group-id=main-app-replies
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.add.type.headers=false

spring.kafka.consumer.properties.fetch.max.wait.ms=120000

# =================
# Listener settings
# =================
spring.kafka.listener.ack-mode=record
spring.kafka.listener.concurrency=3

# ================================
# Topics (must match microservice)
# ================================
app.kafka.input-topic=user-event.v1
app.kafka.reply-topic=user-event.reply.v1

# ========================
# Logging (Prod debugging)
# ========================
logging.level.org.apache.kafka=DEBUG
logging.level.org.springframework.kafka=DEBUG

# ======================
# Actuator & Monitoring
# ======================
management.endpoints.web.exposure.include=health,info,metrics,env
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.db.enabled=true
#management.health.kafka.enabled=true

# Logging
logging.level.root=INFO
logging.level.app=DEBUG
logging.level.org.hibernate=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n

# Security
#spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI}
